#!env/bin/python

import click
import psycopg
import sys

@click.group()
@click.option('-u', '--user', default='finance', help='Database user')
@click.option('-p', '--password', default='finance', help='Database password')
@click.option('-h', '--host', default='localhost', help='Server hostname/IP address')
@click.option('-t', '--port', default=5432, help='Server TCP port')
@click.option('-d', '--database', default='finance', help='Database name')
@click.pass_context
def cli(ctx, user, password, host, port, database):
    """
    Connect to the specified database and pass control to a child command.

    Parameters:
    - ctx: click context
    - user: database user
    - password: database password
    - host: server hostname/IP address
    - port: server TCP port
    - database: database names
    
    Returns:
    - None
    """

    # Ensure that ctx.obj exists and is a dictionary
    ctx.ensure_object(dict)

    try:

        # Connect to the database
        ctx.obj['DB'] = psycopg.connect(
            user=user,
            password=password,
            host=host,
            port=port,
            dbname=database,
            row_factory=psycopg.rows.dict_row
        )

    # Handle connection errors
    except psycopg.errors.OperationalError as error:

        click.echo(f'Error (operational): {error}', err = True)
        sys.exit(1)

@cli.command('init')
@click.pass_context
def init(ctx):
    """
    Initialize the database by loading its schema.

    Parameters:
    - ctx: click context
    
    Returns:
    - None
    """

    # Get database connection from click context
    db = ctx.obj['DB']

    try:

        # Load the schema from a file
        with open('schema.sql', 'r') as schema:

            db.execute(schema.read())

    # Handle errors related to reading the schema
    except IOError as error:

        db.close()
        click.echo(f"Error (I/O): {error}", err = True)
        sys.exit(1)

    # Handle errors related to the schema's syntax
    except psycopg.errors.SyntaxError as error:

        db.close()
        click.echo(f"Error (syntax): {error}", err = True)
        sys.exit(1)

    # Handle errors related to the schema having already been loaded
    except psycopg.errors.DuplicateTable as error:

        db.close()
        click.echo(f"Error (duplicate table): {error}", err = True)
        sys.exit(1)

    # Save our changes
    db.commit()
    db.close()

    click.echo('Database initizialization completed')

@cli.command('reset')
@click.pass_context
def init(ctx):
    """
    Reset the database.

    Parameters:
    - ctx: click context
    
    Returns:
    - None
    """

    # Get database connection from click context
    db = ctx.obj['DB']

    tables = [
        'users',
        'accounts',
        'transactions',
        'transfers',
        'interest'
    ]

    # Drop all tables from the database
    for table in tables:

        db.execute('DROP TABLE IF EXISTS %s CASCADE;' % table)

    # Re-create all the tables
    with open('schema.sql', 'r') as schema:

        db.execute(schema.read())

    # Save our changes
    db.commit()
    db.close()

    click.echo('Database reset completed')

# Make cli() the entry point of this script
cli()